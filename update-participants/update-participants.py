import argparse
import datetime
import pywikibot
import re

from clint.textui import progress

THREE_MONTHS_AGO = datetime.datetime.today() - datetime.timedelta(60)
USER_TEMPLATE = re.compile(ur"{{.*?[Uu]ser.*?\|(.+?)(?:\|.*?)?}}", re.UNICODE)
USER_LINK = re.compile(ur"\[\[[Uu]ser.*?:(.+?)(?:\|.*?)?\]\]", re.UNICODE)
TEMPLATE = u"{}\n===Inactive participants===\n''Generated by a [[User:APersonBot|bot]]''\n{}"
SUMMARY = "[[Wikipedia:Bots/Requests for approval/APersonBot 9|Bot]] moving inactive project participants into their own section"

def is_user_active(site, username):
    """Tests if a given user is active."""
    user = pywikibot.User(site, title=username)
    try:
        _, _, timestamp, _ = next(user.contributions(total=1))
        return timestamp > THREE_MONTHS_AGO
    except StopIteration:
        return False

def line_to_username(line):
    """Given a line of wikitext, extract a username."""
    user_template_match = USER_TEMPLATE.search(line)
    if user_template_match:
        return user_template_match.group(1)

    user_link_match = USER_LINK.search(line)
    if user_link_match:
        return user_link_match.group(1)

    return None

def wikitext_to_usernames(wikitext):
    """Given some wikitext, return a tuple of (username, line)'s."""
    result = []
    for each_line in wikitext.splitlines():
        username = line_to_username(each_line)
        if username:
            result.append((username, each_line))
    return result

def update_participants_list(site, wikitext):
    """
    Given a Pywikibot Site and some wikitext containing a participants list,
    create an "Inactive participants" section and move users there as needed.
    """
    first_line = next(x for x in wikitext.splitlines() if line_to_username(x))
    last_line = next(x for x in reversed(wikitext.splitlines()) if line_to_username(x))
    old_participants_list = wikitext[wikitext.find(first_line):wikitext.find(last_line) + len(last_line)]

    active_users, inactive_users = "", ""
    for username, line in progress.bar(wikitext_to_usernames(wikitext)):
        if is_user_active(site, username):
            active_users += line + "\n"
        else:
            inactive_users += line + "\n"

    new_participants_list = TEMPLATE.format(unicode(active_users),
                                            unicode(inactive_users))
    return wikitext.replace(old_participants_list, new_participants_list)

def main():
    site = pywikibot.Site("en", "wikipedia")
    site.login()

    parser = argparse.ArgumentParser()
    parser.add_argument("page", help="The title (with namespace) of the page to process.")
    args = parser.parse_args()

    page = pywikibot.Page(site, args.page)
    if not page.exists():
        print("%s doesn't exist! Exiting." % args.page)
        sys.exit(1)

    page.text = update_participants_list(site, page.text)
    page.save(summary=SUMMARY)

if __name__ == "__main__":
    main()
